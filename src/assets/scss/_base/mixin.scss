@mixin font-size($size: 24, $base: 16) {
  font-size: $size + px;
  font-size: ($size / $base) * 1rem;
}
@mixin opacity($opacity) {
  opacity: $opacity;
  @if $opacity == 1 {
    filter: progid:dximagetransform.microsoft.alpha(enabled=false);
  } @else {
    $opacityIE: $opacity * 100;

    filter: progid:dximagetransform.microsoft.alpha(Opacity=$opacityIE);
  }
}
@mixin clearfix() {
  &::after {
    display: block;
    clear: both;
    content: '';
  }
}

@mixin arrow(
  $direction: right,
  $size: 10px,
  $borderwidth: 2px,
  $color: #333,
  $horizontal: right,
  $margin: 10px
) {
  &::after {
    position: absolute;
    top: 50%;
    display: block;
    width: $size;
    height: $size;
    margin-top: round(-$size / 2);
    content: '';
    border-top: $borderwidth solid $color;
    border-right: $borderwidth solid $color;
    @if $direction == top {
      transform: rotate(-45deg);
    } @else if $direction == bottom {
      transform: rotate(135deg);
    } @else if $direction == left {
      transform: rotate(225deg);
    } @else {
      transform: rotate(45deg);
    }
    @if $horizontal == left {
      left: -(round($size / 2) - 1px);
    } @else {
      right: $margin + round($size / 5);
    }
  }
}
// Usage:
// div {
//   position: relative;
//   @include arrow(right, 10px, 2px, #333, right, 10px);
// }

@mixin spinner(
  $position: absolute,
  $size: 16px,
  $borderwidth: 2px,
  $color: #aaa,
  $parentclass: ready,
  $defaultdisplay: visible
) {
  &::before {
    position: $position;
    top: 50%;
    left: 50%;
    z-index: 100;
    width: $size;
    height: $size;
    margin: round(-$size / 2) 0 0 round(-$size / 2);
    content: '';
    border: $borderwidth solid $color;
    border-right-color: transparent;
    border-radius: 50%;
    transition: all 0.3s linear 0.3s;
    animation: spin 1s linear infinite;
    @if $defaultdisplay == visible {
      visibility: visible;
      @include opacity(1);
    } @else {
      visibility: hidden;
      @include opacity(0);
    }
  }
  &.#{$parentclass} {
    &::before {
      @if $defaultdisplay == visible {
        visibility: hidden;
        @include opacity(0);
      } @else {
        visibility: visible;
        @include opacity(1);
      }
    }
  }
}
// Usage:
// div {
//   @include spinner(absolute, 16px, 2px, #aaa, ready, visible/hidden);
// }

@mixin multiline-truncate(
  $font-size: $paragraph-font-size,
  $line-height: 1.4,
  $lines-to-show: 3,
  $type: fade,
  $excerpt-bg: transparent
) {
  position: relative;
  display: block; /* Fallback for non-webkit */
  display: -webkit-box;
  height: $font-size * $line-height * $lines-to-show;
  max-height: $font-size * $line-height * $lines-to-show; /* Fallback for non-webkit */
  // -webkit-line-clamp: $lines-to-show;
  // -webkit-box-orient: vertical;
  // text-overflow: ellipsis;
  overflow: hidden;
  // @-moz-document url-prefix() {
  font-size: $font-size;
  line-height: $line-height;
  word-break: break-all;
  background: $excerpt-bg;
  &::before {
    position: absolute;
    right: 0;
    bottom: 0;
    float: right;
    width: 3rem;
    margin-left: -3rem;
    @if $type == fade {
      height: $font-size * $line-height;
      content: '';
      background: linear-gradient(
        to right,
        rgba(255, 255, 255, 0),
        rgba(255, 255, 255, 0.7) 50%,
        rgba(255, 255, 255, 1) 90%
      );
    } @else {
      padding-left: 2rem;
      content: '\2026';
      background: linear-gradient(
        to right,
        rgba(255, 255, 255, 0),
        rgba(255, 255, 255, 1) 62%,
        rgba(255, 255, 255, 1) 100%
      );
    }
  }
  &::after {
    position: absolute;
    z-index: 1;
    width: 100%;
    height: 50px;
    content: '';
    background: $excerpt-bg;
  }
  // }
}

// /* styles for '...' */
// .block-with-text {
//   overflow: hidden;
//   position: relative;
//   line-height: 1.2em;
//   /* max-height = line-height (1.2) * lines max number (3) */
//   max-height: 3.6em;
//   /* fix problem when last visible word doesn't adjoin right side  */
//   text-align: justify;
//   /* place for '...' */
//   margin-right: -1em;
//   padding-right: 1em;
//   /* create the ... */
//   .block-with-text:before {
//     /* points in the end */
//     content: '...';
//     /* absolute position */
//     position: absolute;
//     /* set position to right bottom corner of block */
//     right: 0;
//     bottom: 0;
//   }
//   /* hide ... if we have text, which is less than or equal to max lines */
//   .block-with-text:after {
//     /* points in the end */
//     content: '';
//     /* absolute position */
//     position: absolute;
//     /* set position to right bottom corner of text */
//     right: 0;
//     /* set width and height */
//     width: 1em;
//     height: 1em;
//     margin-top: 0.2em;
//     /* bg color = bg color under block */
//     background: white;
//   }
// }

/*
@mixin image-2x($image, $width, $height) {
@media (min--moz-device-pixel-ratio: 1.3),
(-o-min-device-pixel-ratio: 2.6/2),
(-webkit-min-device-pixel-ratio: 1.3),
(min-device-pixel-ratio: 1.3),
(min-resolution: 1.3dppx) {
//	on retina, use image that's scaled by 2
background-image: url($image);
background-size: $width $height;
}
}
*/
// Usage:
// div.logo {
//   background: url("logo.png") no-repeat;
//   @include image-2x("logo2x.png", 100px, 25px);
// }

/* ==================================================
For Retine mix-in Sprite
================================================== */
@mixin sprite-2x-width($sprite) {
  width: nth($sprite, 5) / 2;
}
@mixin sprite-2x-height($sprite) {
  height: nth($sprite, 6) / 2;
}
@mixin sprite-2x-position($sprite) {
  $sprite-offset-x: nth($sprite, 3) / 2;
  $sprite-offset-y: nth($sprite, 4) / 2;

  background-position: $sprite-offset-x $sprite-offset-y;
}
@mixin sprite-2x-image($sprite) {
  $sprite-image: nth($sprite, 9);

  background-image: url(#{$sprite-image});
}

@mixin sprite-2x-size($sprite) {
  background-size: nth($sprite, 7) / 2 nth($sprite, 8) / 2;
}
@mixin sprite-2x($sprite) {
  @include sprite-2x-image($sprite);
  @include sprite-2x-position($sprite);
  @include sprite-2x-size($sprite);
  @include sprite-2x-width($sprite);
  @include sprite-2x-height($sprite);
}

// For Align-Center 2x
// @mixin sprite-position-center($sprite) {
//   $sprite-offset-x: center;
//   $sprite-offset-y: nth($sprite, 4) / 2;
//   background-position: $sprite-offset-x  $sprite-offset-y;
// }
// @mixin sprite-center($sprite) {
//   @include sprite-image($sprite);
//   @include sprite-position-center($sprite);
//   @include sprite-2x-size($sprite);
//   @include sprite-width($sprite);
//   @include sprite-height($sprite);
// }

/* ==================================================
.wp-editor
================================================== */
@mixin wp-editor($margin) {
  .wp-editor {
    font-family: $fontfamily;
    font-size: $fontsize + px;
    line-height: $lineheight;
    h3,
    h4,
    p {
      margin: $margin 0;
      overflow: hidden;
      &:first-child {
        margin-top: 0;
      }
      &:last-child {
        margin-bottom: 0;
      }
    }
    h3 {
      font-size: 14px;
    }
    h4 {
      font-size: 13px;
    }
    a {
      color: $linkcolor;
      text-decoration: underline;
      &:hover {
        text-decoration: none;
      }
    }
    img {
      max-width: 100%;
      height: auto;
    }

    /*
    blockquote {
    margin: $margin 0;
    padding: 20px;
    position: relative;
    &:before, &:after {
    content: "";
    display: block;
    position: absolute;
    z-index: 0;
    width: 72px;
    height: 56px;
  }
  &:before {
  top: 20px;
  left: 20px;
  //	background: url(../img/quote-top.png) no-repeat 0 0;
}
&:after {
bottom: 20px;
right: 20px;
//	background: url(../img/quote-bottom.png) no-repeat 0 0;
}
p {
&:last-child{
margin-bottom: 0;
}
}
@media only screen and (max-width:$breakPoint) {
padding: 28px 25px;
&:before, &:after{
width: 36px;
height: 28px;
}
&:before {
top: 14px;
left: 14px;
background-size: 36px 28px;
}
&:after {
bottom: 14px;
right: 14px;
background-size: 36px 28px;
}
}
}
*/
    blockquote {
      padding-left: 15px;
      margin: $margin 0;
      font-weight: bold;
      border-left: 5px solid $bordercolor;
    }
    @media only screen and (min-width: $breakPoint) {
      blockquote {
        padding-left: 35px;
      }
    }
  }
  .aligncenter {
    display: block;
    margin: 0 auto;
  }
  .alignleft {
    float: left;
    margin: 0 $margin $margin 0;
  }
  .alignright {
    float: right;
    margin: 0 0 $margin $margin;
  }
  .wp-caption {
    padding-top: 4px;
    margin: 10px;
    text-align: center;
    background-color: #f3f3f3;
    border: 1px solid #ddd;
    // optional rounded corners for browsers that support it
    border-radius: 3px;
    img {
      padding: 0;
      margin: 0;
      border: 0 none;
    }
    p.wp-caption-text {
      padding: 0 4px 5px;
      margin: 0;
      font-size: 11px;
      line-height: 17px;
    }
  }
}
